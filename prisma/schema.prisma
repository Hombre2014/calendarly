generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  directUrl         = env("DIRECT_URL")
  url               = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  image         String?
  grantId       String?
  userName      String?         @unique
  grantEmail    String?
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  availability  Availability[]
  eventType     EventType[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Account {
  scope             String?
  type              String
  userId            String
  provider          String
  id_token          String?
  expires_at        Int?
  token_type        String?
  access_token      String?
  refresh_token     String?
  session_state     String?
  providerAccountId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model VerificationToken {
  token      String
  expires    DateTime
  identifier String

  @@id([identifier, token])
}

model Availability {
  day       Day
  fromTime  String
  tillTime  String
  id        String   @id @default(uuid())
  isActive  Boolean  @default(true)

  userId    String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id]) // ", onDelete: Cascade" if needed
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model EventType {
  duration          Int
  id                String   @id @default(uuid())
  url               String
  title             String
  active            Boolean  @default(true)
  description       String
  videoCallSoftware String   @default("Google Meet")

  userId            String?
  createdAt         DateTime @default(now())
  User              User?    @relation(fields: [userId], references: [id]) // ", onDelete: Cascade" if needed
}
